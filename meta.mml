{
    "cells": [
        {
            "string": "import std.arith.peano\nimport std.adt.list\nimport std.adt.option\nimport std.adt.assoclist",
            "compiled": true,
            "title": "Imports",
            "items": [
                {
                    "kind": "import",
                    "module": "std.arith.peano",
                    "namespace": false
                },
                {
                    "kind": "import",
                    "module": "std.adt.list",
                    "namespace": false
                },
                {
                    "kind": "import",
                    "module": "std.adt.option",
                    "namespace": false
                },
                {
                    "kind": "import",
                    "module": "std.adt.assoclist",
                    "namespace": false
                }
            ]
        },
        {
            "string": "define Expr\ndefine expr : Nat -> List Expr -> Expr\ndefine lam : Expr -> Expr\n\nassume forall P, e : Expr.\n\tif \n\t\tforall n : Nat, es : List Expr.\n\t\tif forall x : list_contains es. P x then\n\t\tP (expr n es)\n\tthen if\n\t\tforall f : Expr.\n\t\tif P f then\n\t\tP (lam f)\n\tthen\n\t\tP e",
            "compiled": true,
            "title": "Expressions",
            "items": [
                {
                    "kind": "definition",
                    "type": "Expr"
                },
                {
                    "kind": "definition",
                    "type": "expr"
                },
                {
                    "kind": "assumption",
                    "expr": "forall(T215)(if(Nat(T215))(forall(T428)(if(List(Expr)(T428))(Expr(expr(T215)(T428))))))"
                },
                {
                    "kind": "definition",
                    "type": "lam"
                },
                {
                    "kind": "assumption",
                    "expr": "forall(T124)(if(Expr(T124))(Expr(lam(T124))))"
                },
                {
                    "kind": "assumption",
                    "expr": "forall(P)(forall(e)(if(Expr(e))(if(forall(n)(if(Nat(n))(forall(es)(if(List(Expr)(es))(if(forall(x)(if(list_contains(es)(x))(P(x))))(P(expr(n)(es))))))))(if(forall(f)(if(Expr(f))(if(P(f))(P(lam(f))))))(P(e))))))"
                }
            ]
        },
        {
            "string": "define 0expr n as expr n []\ndefine 1expr n c as expr n Cons(c,[])\ndefine 2expr n c d as expr n Cons(c,Cons(d,[]))",
            "compiled": true,
            "title": "",
            "items": [
                {
                    "kind": "definition",
                    "type": "0expr"
                },
                {
                    "kind": "assumption",
                    "expr": "forall(n)(=(0expr(n))(expr(n)([])))"
                },
                {
                    "kind": "definition",
                    "type": "1expr"
                },
                {
                    "kind": "assumption",
                    "expr": "forall(n)(forall(c)(=(1expr(n)(c))(expr(n)(Cons)(c)([]))))"
                },
                {
                    "kind": "definition",
                    "type": "2expr"
                },
                {
                    "kind": "assumption",
                    "expr": "forall(n)(forall(c)(forall(d)(=(2expr(n)(c)(d))(expr(n)(Cons)(c)(Cons(d)([]))))))"
                }
            ]
        },
        {
            "string": "define Requirement\ndefine Literal\ndefine requirement : Expr -> List Literal -> List Expr -> Requirement\nassume forall x. Requirement x = (exists g d a. (x = requirement g d a))\ndefine Justification",
            "compiled": true,
            "title": "Justifications",
            "items": [
                {
                    "kind": "definition",
                    "type": "Requirement"
                },
                {
                    "kind": "definition",
                    "type": "Literal"
                },
                {
                    "kind": "definition",
                    "type": "requirement"
                },
                {
                    "kind": "assumption",
                    "expr": "forall(T325)(if(Expr(T325))(forall(T956)(if(List(Literal)(T956))(forall(T330)(if(List(Expr)(T330))(Requirement(requirement(T325)(T956)(T330))))))))"
                },
                {
                    "kind": "assumption",
                    "expr": "forall(x)(=(Requirement(x))(exists(g)(exists(d)(exists(a)(=(x)(requirement(g)(d)(a)))))))"
                },
                {
                    "kind": "definition",
                    "type": "Justification"
                }
            ]
        },
        {
            "string": "define \"forall\" : Literal\ndefine intro_forall\nassume forall l : Literal, e : Expr.\n\tintro_forall l (expr \"forall\" (Cons(lam e,[]))) = requirement(\n\t\te,\n\t\tCons(l,[]),\n\t\t[]\n\t)",
            "compiled": true,
            "title": "Basic Justifications",
            "items": [
                {
                    "kind": "definition",
                    "type": "\"forall\""
                },
                {
                    "kind": "assumption",
                    "expr": "Literal(\"forall\")"
                },
                {
                    "kind": "definition",
                    "type": "intro_forall"
                },
                {
                    "kind": "assumption",
                    "expr": "forall(l)(if(Literal(l))(forall(e)(if(Expr(e))(=(intro_forall(l)(expr(\"forall\")(Cons(lam(e))([]))))(requirement(e)(Cons(l)([]))([]))))))"
                }
            ]
        },
        {
            "string": "define \"if\"",
            "compiled": true,
            "title": "",
            "items": [
                {
                    "kind": "definition",
                    "type": "\"if\""
                }
            ]
        },
        {
            "string": "define JMap as AssocList Expr Justification\ndefine ProofBox\ndefine proof_box : JMap -> AssocList (Pair Nat (List Expr)) ProofBox -> ProofBox\nassume forall x : ProofBox. exists jm : JMap, nm : (AssocList (Pair Nat (List Expr)) ProofBox). x = proof_box jm nm",
            "compiled": true,
            "title": "Proof Boxes",
            "items": [
                {
                    "kind": "definition",
                    "type": "JMap"
                },
                {
                    "kind": "assumption",
                    "expr": "=(JMap)(AssocList(Expr)(Justification))"
                },
                {
                    "kind": "definition",
                    "type": "ProofBox"
                },
                {
                    "kind": "definition",
                    "type": "proof_box"
                },
                {
                    "kind": "assumption",
                    "expr": "forall(T466)(if(JMap(T466))(forall(T381)(if(AssocList(Pair(Nat)(List(Expr)))(ProofBox)(T381))(ProofBox(proof_box(T466)(T381))))))"
                },
                {
                    "kind": "assumption",
                    "expr": "forall(x)(if(ProofBox(x))(exists(jm)(and(JMap(jm))(exists(nm)(and(AssocList(Pair(Nat)(List(Expr)))(ProofBox)(nm))(=(x)(proof_box(jm)(nm))))))))"
                }
            ]
        },
        {
            "string": "define judg \n\ndefine A\ndefine P\ndefine y\nshow \n\tif \n\t\tforall x. \n\t\t\tif \n\t\t\t\tP x \n\t\t\tthen \n\t\t\t\tA \n\tthen \n\t\tif \n\t\t\tP y \n\t\tthen \n\t\t\tA\n\ndefine \"A\" : Literal\ndefine \"P\" : Literal\ndefine \"x\" : Literal\ndefine \"y\" : Literal\n\ndefine target as \n\t2expr 4 (\n\t\t1expr 3 (\n\t\t\t2expr 5 (\n\t\t\t\t1expr 2 (\n\t\t\t\t\t0expr 0\n\t\t\t\t)\n\t\t\t) (\n\t\t\t\t1expr 3\n\t\t\t)\n\t\t)\n\t) (\n\t\t2expr 4 (\n\t\t\t1expr 1 (\n\t\t\t\t0expr 0\n\t\t\t)\n\t\t) (\n\t\t\t0expr 2\n\t\t)\n\t)\n\nshow judg (\n\tCons(\"y\",Cons(\"P\",Cons(\"A\",Cons(\"forall\",Cons(\"if\",[]))))),\n\t[],\n\tproof_box (\n\t\tCons(\n\t\t\tpair target intro_forall\n\t\t,[]),\n\t\tCons(\n\t\t\tpair (pair 1 [])  (\n\t\t\t\tproof_box (\n\t\t\t\t\t[]\n\t\t\t\t) (\n\t\t\t\t\t[]\n\t\t\t\t)\n\t\t\t)\n\t\t)\n\t),\n\ttarget\n)",
            "compiled": true,
            "title": "Judgements",
            "items": [
                {
                    "kind": "definition",
                    "type": "judg"
                },
                {
                    "kind": "definition",
                    "type": "A"
                },
                {
                    "kind": "definition",
                    "type": "P"
                },
                {
                    "kind": "definition",
                    "type": "y"
                },
                {
                    "kind": "theorem",
                    "expr": "if(forall(x)(if(P(x))(A)))(if(P(y))(A))",
                    "proof": {
                        "requirement": {
                            "goal": "if(forall(x)(if(P(x))(A)))(if(P(y))(A))",
                            "definitions": [

                            ],
                            "assumptions": [

                            ]
                        },
                        "justification": {
                            "justification_version": 1,
                            "justification_type": "ImplicationJustification",
                            "keep_condition_ids": [

                            ],
                            "keep_definition_ids": [

                            ]
                        },
                        "dependencies": [
                            {
                                "requirement": {
                                    "goal": "A",
                                    "definitions": [

                                    ],
                                    "assumptions": [
                                        "forall(x)(if(P(x))(A))",
                                        "P(y)"
                                    ]
                                },
                                "justification": {
                                    "justification_version": 1,
                                    "justification_type": "ModusPonensJustification",
                                    "implication": "if(P(y))(A)"
                                },
                                "dependencies": [
                                    {
                                        "requirement": {
                                            "goal": "P(y)",
                                            "definitions": [

                                            ],
                                            "assumptions": [

                                            ]
                                        },
                                        "justification": {
                                            "justification_version": 1,
                                            "justification_type": "AssumptionJustification"
                                        },
                                        "dependencies": [

                                        ]
                                    },
                                    {
                                        "requirement": {
                                            "goal": "if(P(y))(A)",
                                            "definitions": [

                                            ],
                                            "assumptions": [

                                            ]
                                        },
                                        "justification": {
                                            "justification_version": 1,
                                            "justification_type": "RefineJustification",
                                            "general": "forall(x)(if(P(x))(A))"
                                        },
                                        "dependencies": [
                                            {
                                                "requirement": {
                                                    "goal": "forall(x)(if(P(x))(A))",
                                                    "definitions": [

                                                    ],
                                                    "assumptions": [

                                                    ]
                                                },
                                                "justification": {
                                                    "justification_version": 1,
                                                    "justification_type": "AssumptionJustification"
                                                },
                                                "dependencies": [

                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                },
                {
                    "kind": "definition",
                    "type": "\"A\""
                },
                {
                    "kind": "assumption",
                    "expr": "Literal(\"A\")"
                },
                {
                    "kind": "definition",
                    "type": "\"P\""
                },
                {
                    "kind": "assumption",
                    "expr": "Literal(\"P\")"
                },
                {
                    "kind": "definition",
                    "type": "\"x\""
                },
                {
                    "kind": "assumption",
                    "expr": "Literal(\"x\")"
                },
                {
                    "kind": "definition",
                    "type": "\"y\""
                },
                {
                    "kind": "assumption",
                    "expr": "Literal(\"y\")"
                },
                {
                    "kind": "definition",
                    "type": "target"
                },
                {
                    "kind": "assumption",
                    "expr": "=(target)(2expr(4)(1expr(3)(2expr(5)(1expr(2)(0expr(0)))(1expr(3))))(2expr(4)(1expr(1)(0expr(0)))(0expr(2))))"
                },
                {
                    "kind": "theorem",
                    "expr": "judg(Cons(\"y\")(Cons(\"P\")(Cons(\"A\")(Cons(\"forall\")(Cons(\"if\")([]))))))([])(proof_box(Cons(pair(target)(intro_forall))([]))(Cons(pair(pair(1)([]))(proof_box([])([])))))(target)",
                    "proof": {
                        "requirement": {
                            "goal": "judg(Cons(\"y\")(Cons(\"P\")(Cons(\"A\")(Cons(\"forall\")(Cons(\"if\")([]))))))([])(proof_box(Cons(pair(target)(intro_forall))([]))(Cons(pair(pair(1)([]))(proof_box([])([])))))(target)",
                            "definitions": [

                            ],
                            "assumptions": [

                            ]
                        },
                        "justification": {
                            "justification_version": 1,
                            "justification_type": "MissingJustification"
                        },
                        "dependencies": [

                        ]
                    }
                }
            ]
        }
    ],
    "version": 30
}